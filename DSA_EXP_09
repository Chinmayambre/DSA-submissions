// Implementation of Binary Search Tree
#include <stdio.h>
#include <stdlib.h>
 
struct node{
    struct node *lchild;
    int data;
    struct node *rchild;
}*root =NULL;

struct node *RInsert(struct node *p,int key){
    struct node *t=NULL;
    if(p==NULL){
        t=(struct node *)malloc(sizeof(struct node));
        t->data=key;
        t->lchild = t->rchild = NULL;
        return t;
    }
    if(key<p->data){
        p->lchild=RInsert(p->lchild,key);
    }else if(key>p->data){
        p->rchild=RInsert(p->rchild,key);
    }return p;
}


struct node *InPre(struct node *p){
    while(p && p->rchild!=NULL){
        p=p->rchild;
    }
    return p;
}

struct node *InSucc(struct node *p){
    while(p && p->lchild!=NULL){
        p=p->lchild;
    }
    return p;
}

int height(struct node *p){
    int x,y;
    if(p==NULL){
        return 0;
    }
    x=height(p->lchild);
    y=height(p->rchild);
    return x>y? x+1:y+1;
}

struct node* delete(struct node *p,int key){
    struct node * q;
    if(p==NULL){
        return NULL;
    }
    if(p->lchild==NULL && p->rchild==NULL){
        if(p==root){
            root=NULL;
        }
        free(p);
        return NULL;
    }
    if(key<p->data){
        p->lchild=delete(p->lchild,key);
    }else if(key>p->data){
        p->rchild=delete(p->rchild,key);
    }
    else{
        if(height(p->lchild)>height(p->rchild)){
            q=InPre(p->lchild);
            p->data=q->data;
            p->lchild=delete(p->lchild,q->data);
        }
        else{
            q=InSucc(p->rchild);
            p->data=q->data;
            p->rchild=delete(p->rchild,q->data);
        }
    }
    return p;
}
void inorder(struct node *p){
    if(p){
         inorder(p->lchild);
         printf("%d ",p->data);
         inorder(p->rchild);
    }
}


int main() {
    struct node *temp;
    root=RInsert(root,50);
    RInsert(root,40);
    RInsert(root,20);
    RInsert(root,30);
    delete(root,30);
    inorder(root);

    
}
